name: 'deploy'
on:
  push:
    paths:
      - '.github/workflows/**'
      - 'src/**'
      - 'build.gradle'
      - 'Dockerfile'
      - 'readme.md'
      - 'infraScript/**'
    branches:
      - 'main'

# 이 부분을 추가
permissions:
  contents: write
  packages: write  # 이 권한이 중요!
  issues: write
  pull-requests: write

jobs:
  makeTagAndRelease:
    runs-on: ubuntu-latest
    outputs:
      tag_name: ${{ steps.create_tag.outputs.new_tag }}
    steps:
      - uses: actions/checkout@v4
      - name: Create Tag
        id: create_tag
        uses: mathieudutour/github-tag-action@v6.1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.create_tag.outputs.new_tag }}
          release_name: Release ${{ steps.create_tag.outputs.new_tag }}
          body: ${{ steps.create_tag.outputs.changelog }}
          draft: false
          prerelease: false
  buildImageAndPush:
    name: 도커 이미지 빌드와 푸시
    needs: makeTagAndRelease
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Docker Buildx 설치
        uses: docker/setup-buildx-action@v2
      - name: 레지스트리 로그인
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: set lower case owner name
        run: |
          echo "OWNER_LC=${OWNER,,}" >> ${GITHUB_ENV}
        env:
          OWNER: "${{ github.repository_owner }}"
      - name: application-secret.yml 생성
        env:
          ACTIONS_STEP_DEBUG: true
          APPLICATION_SECRET: ${{ secrets.APPLICATION_SECRET_YML }}
        run: echo "$APPLICATION_SECRET" > src/main/resources/application-secret.yml
      - name: 빌드 앤 푸시
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: |
            ghcr.io/${{ env.OWNER_LC }}/blog:${{ needs.makeTagAndRelease.outputs.tag_name }},
            ghcr.io/${{ env.OWNER_LC }}/blog:latest

  deploy:
    runs-on: ubuntu-latest
    needs: [buildImageAndPush]
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Execute deployment script via SSM
        run: |
          # SSM 명령 실행
          COMMAND_ID=$(aws ssm send-command \
            --document-name "AWS-RunShellScript" \
            --parameters 'commands=[
              "echo \"=== 시작 시간: $(date) ===\"",
              "echo \"=== 현재 사용자 ===\"",
              "whoami",
              "echo \"=== 현재 디렉토리 ===\"", 
              "pwd",
              "echo \"=== 루트 디렉토리 내용 ===\"",
              "ls -la /",
              "echo \"=== dockerProjects 디렉토리 생성 ===\"",
              "sudo mkdir -p /dockerProjects/blog",
              "echo \"=== dockerProjects 디렉토리 확인 ===\"",
              "ls -la /dockerProjects/",
              "echo \"=== 배포 스크립트 다운로드 ===\"",
              "sudo curl -o /dockerProjects/blog/zero_downtime_deploy.py https://raw.githubusercontent.com/sik2/deploy-demo-01-25/main/infraScript/zero_downtime_deploy.py",
              "echo \"=== 스크립트 권한 설정 ===\"",
              "sudo chmod +x /dockerProjects/blog/zero_downtime_deploy.py",
              "echo \"=== 스크립트 파일 확인 ===\"",
              "ls -la /dockerProjects/blog/",
              "echo \"=== Docker 권한 임시 설정 ===\"",
              "sudo chmod 666 /var/run/docker.sock",
              "echo \"=== 기존 컨테이너 정리 ===\"",
              "sudo docker rm -f blog-app blog_1 blog_2 2>/dev/null || true",
              "echo \"=== 최신 이미지 pull ===\"", 
              "sudo docker pull ghcr.io/survival-for-4000/blog:latest",
              "echo \"=== 새 컨테이너 실행 ===\"",
              "sudo docker run -d --name blog-app --restart unless-stopped -p 8080:8080 ghcr.io/survival-for-4000/blog:latest",
              "echo \"=== 컨테이너 상태 확인 ===\"",
              "sudo docker ps",
              "echo \"=== 컨테이너 로그 확인 (최근 10줄) ===\"",
              "sudo docker logs --tail 10 blog-app",
              "echo \"=== 애플리케이션 헬스체크 ===\"",
              "sleep 10",
              "curl -f http://localhost:8080 || echo \"애플리케이션 응답 없음\"",
              "echo \"=== 완료 시간: $(date) ===\""
            ]' \
            --targets "Key=instanceids,Values=i-0a488308ec67f3dad" \
            --query 'Command.CommandId' \
            --output text)
          
          echo "Command ID: $COMMAND_ID"
          
          # 명령 완료까지 대기 (최대 5분)
          echo "명령 실행 완료까지 대기 중..."
          aws ssm wait command-executed \
            --command-id $COMMAND_ID \
            --instance-id i-0a488308ec67f3dad \
            --cli-read-timeout 300 \
            --cli-connect-timeout 60
          
          # 실행 결과 출력
          echo "=== SSM 명령 실행 결과 ==="
          aws ssm get-command-invocation \
            --command-id $COMMAND_ID \
            --instance-id i-0a488308ec67f3dad \
            --query 'StandardOutputContent' \
            --output text
          
          # 에러 로그 출력
          echo "=== SSM 명령 에러 로그 ==="
          ERROR_OUTPUT=$(aws ssm get-command-invocation \
            --command-id $COMMAND_ID \
            --instance-id i-0a488308ec67f3dad \
            --query 'StandardErrorContent' \
            --output text)
          
          if [ "$ERROR_OUTPUT" != "None" ] && [ -n "$ERROR_OUTPUT" ]; then
            echo "$ERROR_OUTPUT"
          else
            echo "에러 없음"
          fi
          
          # 명령 상태 확인
          STATUS=$(aws ssm get-command-invocation \
            --command-id $COMMAND_ID \
            --instance-id i-0a488308ec67f3dad \
            --query 'Status' \
            --output text)
          
          echo "=== 최종 실행 상태: $STATUS ==="
          
          # 실패시 워크플로우 실패 처리
          if [ "$STATUS" != "Success" ]; then
            echo "배포 실패!"
            exit 1
          fi
          
          echo "배포 성공!"
#  deploy:
#    runs-on: ubuntu-latest
#    needs: [ buildImageAndPush ]
#    steps:
#      - name: AWS SSM Send-Command
#        uses: peterkimzz/aws-ssm-send-command@master
#        id: ssm
#        with:
#          aws-region: ${{ secrets.AWS_REGION }}
#          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          instance-ids: "i-0a488308ec67f3dad"
#          working-directory: /
#          comment: Deploy
#          command: |
#            whoami
#            pwd
#            ls -al
#            mkdir -p /dockerProjects/blog
#            ls -la /dockerProjects/
#            curl -o /dockerProjects/blog/zero_downtime_deploy.py https://raw.githubusercontent.com/sik2/deploy-demo-01-25/main/infraScript/zero_downtime_deploy.py
#            chmod +x /dockerProjects/blog/zero_downtime_deploy.py
#            /dockerProjects/blog/zero_downtime_deploy.py