name: 'deploy'
on:
  push:
    paths:
      - '.github/workflows/**'
      - 'src/**'
      - 'build.gradle'
      - 'Dockerfile'
      - 'readme.md'
      - 'infraScript/**'
    branches:
      - 'main'

# 이 부분을 추가
permissions:
  contents: write
  packages: write  # 이 권한이 중요!
  issues: write
  pull-requests: write

jobs:
  makeTagAndRelease:
    runs-on: ubuntu-latest
    outputs:
      tag_name: ${{ steps.create_tag.outputs.new_tag }}
    steps:
      - uses: actions/checkout@v4
      - name: Create Tag
        id: create_tag
        uses: mathieudutour/github-tag-action@v6.1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.create_tag.outputs.new_tag }}
          release_name: Release ${{ steps.create_tag.outputs.new_tag }}
          body: ${{ steps.create_tag.outputs.changelog }}
          draft: false
          prerelease: false
  buildImageAndPush:
    name: 도커 이미지 빌드와 푸시
    needs: makeTagAndRelease
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Docker Buildx 설치
        uses: docker/setup-buildx-action@v2
      - name: 레지스트리 로그인
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: set lower case owner name
        run: |
          echo "OWNER_LC=${OWNER,,}" >> ${GITHUB_ENV}
        env:
          OWNER: "${{ github.repository_owner }}"
      - name: application-secret.yml 생성
        env:
          ACTIONS_STEP_DEBUG: true
          APPLICATION_SECRET: ${{ secrets.APPLICATION_SECRET_YML }}
        run: echo "$APPLICATION_SECRET" > src/main/resources/application-secret.yml
      - name: 빌드 앤 푸시
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: |
            ghcr.io/${{ env.OWNER_LC }}/hoit:${{ needs.makeTagAndRelease.outputs.tag_name }},
            ghcr.io/${{ env.OWNER_LC }}/hoit:latest

  deploy:
    runs-on: ubuntu-latest
    needs: [ buildImageAndPush ]
    timeout-minutes: 20
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Step 1: 환경 준비
      - name: Prepare deployment environment
        run: |
          COMMAND_ID=$(aws ssm send-command \
            --document-name "AWS-RunShellScript" \
            --parameters 'commands=[
              "echo \"=== 환경 준비 시작: $(date) ===\"",
              "whoami",
              "pwd",
              "echo \"=== dockerProjects 디렉토리 생성 ===\"",
              "sudo mkdir -p /home/ubuntu/dockerProjects/hoit",
              "sudo chown ubuntu:ubuntu /home/ubuntu/dockerProjects/hoit",
              "echo \"=== Docker 권한 설정 ===\"",
              "sudo chmod 666 /var/run/docker.sock",
              "echo \"=== 기존 컨테이너 정리 ===\"",
              "sudo docker rm -f hoit-app hoit_1 hoit_2 2>/dev/null || true",
              "echo \"=== 환경 준비 완료 ===\""
            ]' \
            --targets "Key=instanceids,Values=i-0a488308ec67f3dad" \
            --query 'Command.CommandId' \
            --output text)

          echo "Step 1 Command ID: $COMMAND_ID"

          aws ssm wait command-executed \
            --command-id $COMMAND_ID \
            --instance-id i-0a488308ec67f3dad \
            --cli-read-timeout 180

          # 결과 확인
          STATUS=$(aws ssm get-command-invocation \
            --command-id $COMMAND_ID \
            --instance-id i-0a488308ec67f3dad \
            --query 'Status' \
            --output text)

          if [ "$STATUS" != "Success" ]; then
            echo "환경 준비 실패!"
            aws ssm get-command-invocation \
              --command-id $COMMAND_ID \
              --instance-id i-0a488308ec67f3dad \
              --query 'StandardErrorContent' \
              --output text
            exit 1
          fi

      # Step 2: 스크립트 다운로드 및 이미지 Pull
      - name: Download script and pull image
        run: |
          COMMAND_ID=$(aws ssm send-command \
            --document-name "AWS-RunShellScript" \
            --parameters 'commands=[
              "echo \"=== 스크립트 다운로드 시작: $(date) ===\"",
              "cd /home/ubuntu/dockerProjects/hoit",
              "curl -o zero_downtime_deploy.py https://raw.githubusercontent.com/sik2/deploy-demo-01-25/main/infraScript/zero_downtime_deploy.py",
              "chmod +x zero_downtime_deploy.py",
              "ls -la",
              "echo \"=== Docker 이미지 Pull 시작 ===\"",
              "sudo docker pull ghcr.io/survival-for-4000/hoit:latest",
              "echo \"=== 이미지 Pull 완료 ===\"",
              "sudo docker images | grep hoit"
            ]' \
            --targets "Key=instanceids,Values=i-0a488308ec67f3dad" \
            --query 'Command.CommandId' \
            --output text)

          echo "Step 2 Command ID: $COMMAND_ID"

          aws ssm wait command-executed \
            --command-id $COMMAND_ID \
            --instance-id i-0a488308ec67f3dad \
            --cli-read-timeout 300

          # 결과 확인
          STATUS=$(aws ssm get-command-invocation \
            --command-id $COMMAND_ID \
            --instance-id i-0a488308ec67f3dad \
            --query 'Status' \
            --output text)

          if [ "$STATUS" != "Success" ]; then
            echo "스크립트 다운로드/이미지 Pull 실패!"
            aws ssm get-command-invocation \
              --command-id $COMMAND_ID \
              --instance-id i-0a488308ec67f3dad \
              --query 'StandardErrorContent' \
              --output text
            exit 1
          fi

      # 먼저 Step 3만 단순하게 테스트해보세요
      - name: Debug Python script execution
        run: |
          COMMAND_ID=$(aws ssm send-command \
            --document-name "AWS-RunShellScript" \
            --parameters 'commands=[
              "echo \"=== 디버깅 시작: $(date) ===\"",
              "cd /home/ubuntu/dockerProjects/hoit",
              "echo \"=== 현재 디렉토리 내용 ===\"",
              "ls -la",
              "echo \"=== Python 스크립트 문법 체크 ===\"",
              "python3 -m py_compile zero_downtime_deploy.py",
              "echo \"=== Python 스크립트 실행 (타임아웃 테스트) ===\"",
              "timeout 60 python3 zero_downtime_deploy.py || echo \"Script timed out or failed\"",
              "echo \"=== 실행 완료: $(date) ===\""
            ]' \
            --targets "Key=instanceids,Values=i-0a488308ec67f3dad" \
            --query 'Command.CommandId' \
            --output text)
          
          echo "Debug Command ID: $COMMAND_ID"
          
          # 더 짧은 타임아웃으로 테스트
          aws ssm wait command-executed \
            --command-id $COMMAND_ID \
            --instance-id i-0a488308ec67f3dad \
            --cli-read-timeout 120
          
          # 결과 출력
          echo "=== 실행 결과 ==="
          aws ssm get-command-invocation \
            --command-id $COMMAND_ID \
            --instance-id i-0a488308ec67f3dad \
            --query 'StandardOutputContent' \
            --output text
          
          echo "=== 에러 로그 ==="
          aws ssm get-command-invocation \
            --command-id $COMMAND_ID \
            --instance-id i-0a488308ec67f3dad \
            --query 'StandardErrorContent' \
            --output text